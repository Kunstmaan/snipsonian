{
    "title": "snipsonian-observable-state",
    "version": "1.9.1",
    "slug": "/snipsonian-observable-state/1.9.1",
    "description": "Utilities to detect changes in a large state store",
    "documentation": [
        {
            "name": "actionableStore",
            "path": "packages/snipsonian-observable-state/src/actionableStore",
            "slug": "/snipsonian-observable-state/1.9.1/actionableStore",
            "type": "folder",
            "children": [
                {
                    "name": "actionCreators.ts",
                    "path": "packages/snipsonian-observable-state/src/actionableStore/actionCreators.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/actionableStore/actionCreators.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function createAction<Type, Payload>(\n    action: IPayloadAction<Type, Payload>,\n): IPayloadAction<Type, Payload> \n\nexport function createObservableStateAction<Type, Payload, State, ExtraProcessInput, StateChangeNotificationKey>(\n    action: IObservableStateAction<Type, Payload, State, ExtraProcessInput, StateChangeNotificationKey>,\n): IObservableStateAction<Type, Payload, State, ExtraProcessInput, StateChangeNotificationKey>",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "createActionableObservableStateStore.ts",
                    "path": "packages/snipsonian-observable-state/src/actionableStore/createActionableObservableStateStore.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/actionableStore/createActionableObservableStateStore.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function createActionableObservableStateStore<State, ExtraProcessInput, StateChangeNotificationKey = string>(\n    config: IActionableObservableStateStoreConfig<State, ExtraProcessInput>,\n): IActionableObservableStateStore<State, StateChangeNotificationKey>",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "createObservableStateActionMiddleware.ts",
                    "path": "packages/snipsonian-observable-state/src/actionableStore/createObservableStateActionMiddleware.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/actionableStore/createObservableStateActionMiddleware.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function createObservableStateActionMiddleware<\n    State,\n    ExtraProcessInput,\n    StateChangeNotificationKey>({\n    store,\n    // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n    extraProcessInput = ({} as ExtraProcessInput),\n}: {\n    store: IObservableStateStore<State, StateChangeNotificationKey>;\n    extraProcessInput?: ExtraProcessInput;\n}): Middleware",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "isObservableStateAction.ts",
                    "path": "packages/snipsonian-observable-state/src/actionableStore/isObservableStateAction.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/actionableStore/isObservableStateAction.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function isObservableStateAction<\n    Type = string,\n    Payload = {},\n    State = {},\n    ExtraProcessInput = {},\n    // eslint-disable-next-line max-len\n    StateChangeNotificationKey = string>(action: AnyAction): action is IObservableStateAction<Type, Payload, State, ExtraProcessInput, StateChangeNotificationKey>",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-observable-state/src/actionableStore/types.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/actionableStore/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface Action<T = any> \n\nexport interface AnyAction extends Action \n\nexport interface Dispatch<A extends Action = AnyAction> \n\nexport interface Middleware<\n    State = any,\n    D extends Dispatch = Dispatch> \n\nexport interface MiddlewareAPI<D extends Dispatch = Dispatch, State = any> \n\nexport interface IPayloadAction<Type, Payload> extends Action<Type> \n\nexport interface IObservableStateAction<Type, Payload, State, ExtraProcessInput, StateChangeNotificationKey>\n    extends IPayloadAction<Type, Payload> \n\nexport interface IActionableObservableStateStore<State, StateChangeNotificationKey>\n    extends IObservableStateStore<State, StateChangeNotificationKey> \n\nexport interface IActionableObservableStateStoreConfig<\n    State, ExtraProcessInput> extends IObservableStateStoreConfig<State>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "index.ts",
            "path": "packages/snipsonian-observable-state/src/index.ts",
            "slug": "/snipsonian-observable-state/1.9.1/index.ts",
            "type": "file",
            "fileInfo": {
                "exports": null,
                "description": "Utilities to detect changes in a large state store",
                "example": null
            }
        },
        {
            "name": "observer",
            "path": "packages/snipsonian-observable-state/src/observer",
            "slug": "/snipsonian-observable-state/1.9.1/observer",
            "type": "folder",
            "children": [
                {
                    "name": "createStateObserverManager.ts",
                    "path": "packages/snipsonian-observable-state/src/observer/createStateObserverManager.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/observer/createStateObserverManager.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IStateObserverManager<StateChangeNotificationKey> \n\nexport interface IRegisterStateObserverProps<StateChangeNotificationKey> \n\nexport interface IStateObserver<StateChangeNotificationKey> \n\nexport interface IStateObserverNotifyProps<StateChangeNotificationKey> \n\nexport default function createStateObserverManager<StateChangeNotificationKey>(): IStateObserverManager<StateChangeNotificationKey>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "store",
            "path": "packages/snipsonian-observable-state/src/store",
            "slug": "/snipsonian-observable-state/1.9.1/store",
            "type": "folder",
            "children": [
                {
                    "name": "createObservableStateStore.ts",
                    "path": "packages/snipsonian-observable-state/src/store/createObservableStateStore.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/store/createObservableStateStore.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function createObservableStateStore<State, StateChangeNotificationKey = string>(\n    config: IObservableStateStoreConfig<State>,\n): IObservableStateStore<State, StateChangeNotificationKey>",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "stateStorage.ts",
                    "path": "packages/snipsonian-observable-state/src/store/stateStorage.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/store/stateStorage.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IStateStorageConfig<State> \n\nexport interface IBrowserStorageConfig<State> extends IBaseStorageConfig<State> \n\nexport interface ICustomStorageConfig<State> extends IBaseStorageConfig<State> \n\nexport function determineInitialState<State>({\n    initialState,\n    stateStorageConfig,\n}: {\n    initialState: State;\n    stateStorageConfig: IStateStorageConfig<State>;\n}): State \n\nexport function saveStateToStorage<State>({\n    state,\n    stateStorageConfig,\n}: {\n    state: State;\n    stateStorageConfig: IStateStorageConfig<State>;\n}): void",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "storeManager.ts",
                    "path": "packages/snipsonian-observable-state/src/store/storeManager.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/store/storeManager.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function registerStore<State, StateChangeNotificationKey>(\n    store: IObservableStateStore<State, StateChangeNotificationKey>,\n): void \n\nexport function getRegisteredStore<State, StateChangeNotificationKey>(): IObservableStateStore<State, StateChangeNotificationKey>",
                        "description": "You can get the store, after it has been configured, from here to avoid circular dependencies.",
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-observable-state/src/store/types.ts",
                    "slug": "/snipsonian-observable-state/1.9.1/store/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IObservableStateStore<State, StateChangeNotificationKey>\n    extends Pick<IStateObserverManager<StateChangeNotificationKey>, 'registerObserver' | 'unRegisterObserver'> \n\nexport interface IGetState<State> \n\nexport interface ISetState<State, StateChangeNotificationKey> \n\nexport interface ISetStateProps<State, StateChangeNotificationKey> \n\nexport interface ISetStateContext \n\nexport interface IObservableStateStoreConfig<State>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        }
    ]
}