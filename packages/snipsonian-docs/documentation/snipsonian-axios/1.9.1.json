{
    "title": "snipsonian-axios",
    "version": "1.9.1",
    "slug": "/snipsonian-axios/1.9.1",
    "description": "Axios request utilities",
    "documentation": [
        {
            "name": "error",
            "path": "packages/snipsonian-axios/src/error",
            "slug": "/snipsonian-axios/1.9.1/error",
            "type": "folder",
            "children": [
                {
                    "name": "generateTraceableApiErrorId.ts",
                    "path": "packages/snipsonian-axios/src/error/generateTraceableApiErrorId.ts",
                    "slug": "/snipsonian-axios/1.9.1/error/generateTraceableApiErrorId.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function generateTraceableApiErrorId(): string",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "getErrorStatus.ts",
                    "path": "packages/snipsonian-axios/src/error/getErrorStatus.ts",
                    "slug": "/snipsonian-axios/1.9.1/error/getErrorStatus.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function getErrorStatus(error: AxiosError): number",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "isTraceableApiError.ts",
                    "path": "packages/snipsonian-axios/src/error/isTraceableApiError.ts",
                    "slug": "/snipsonian-axios/1.9.1/error/isTraceableApiError.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function isTraceableApiError(error: any): error is ITraceableApiErrorBase<{}>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "header",
            "path": "packages/snipsonian-axios/src/header",
            "slug": "/snipsonian-axios/1.9.1/header",
            "type": "folder",
            "children": [
                {
                    "name": "headerManager.ts",
                    "path": "packages/snipsonian-axios/src/header/headerManager.ts",
                    "slug": "/snipsonian-axios/1.9.1/header/headerManager.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function getAutomaticHeaders(requestMethod: REQUEST_METHODS): IHeaders \n\nexport function addAutomaticHeader(type: AutomaticHeaderType, ...keyValuePairs: IKeyValuePair<string, string>[]): void \n\nexport function isAutomaticHeaderSet(type: AutomaticHeaderType, headerName: string): boolean \n\nexport function clearAutomaticHeader(type: AutomaticHeaderType, headerName: string): void \n\nexport function appendAutomaticHeaders(headers: IHeaders, requestMethod: REQUEST_METHODS): IHeaders \n\nexport function appendContentTypeHeaderIfSet(headers: IHeaders, contentType: string): IHeaders",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-axios/src/header/types.ts",
                    "slug": "/snipsonian-axios/1.9.1/header/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IHeaders \n\nexport interface IAutomaticHeadersMap",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "httpStatus",
            "path": "packages/snipsonian-axios/src/httpStatus",
            "slug": "/snipsonian-axios/1.9.1/httpStatus",
            "type": "folder",
            "children": [
                {
                    "name": "index.ts",
                    "path": "packages/snipsonian-axios/src/httpStatus/index.ts",
                    "slug": "/snipsonian-axios/1.9.1/httpStatus/index.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": null,
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "index.ts",
            "path": "packages/snipsonian-axios/src/index.ts",
            "slug": "/snipsonian-axios/1.9.1/index.ts",
            "type": "file",
            "fileInfo": {
                "exports": null,
                "description": "Axios request utilities",
                "example": null
            }
        },
        {
            "name": "logging",
            "path": "packages/snipsonian-axios/src/logging",
            "slug": "/snipsonian-axios/1.9.1/logging",
            "type": "folder",
            "children": [
                {
                    "name": "getApiLogger.ts",
                    "path": "packages/snipsonian-axios/src/logging/getApiLogger.ts",
                    "slug": "/snipsonian-axios/1.9.1/logging/getApiLogger.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IAxiosApiLogger \n\nexport default function getApiLogger({\n    isApiLoggingEnabled,\n    groupLogger,\n}: IAxiosApiLoggerConfig): IAxiosApiLogger",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "request",
            "path": "packages/snipsonian-axios/src/request",
            "slug": "/snipsonian-axios/1.9.1/request",
            "type": "folder",
            "children": [
                {
                    "name": "getRequestWrapper.ts",
                    "path": "packages/snipsonian-axios/src/request/getRequestWrapper.ts",
                    "slug": "/snipsonian-axios/1.9.1/request/getRequestWrapper.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IRequestWrapper \n\nexport interface IRequestWrapperConfig<ResultingApiError, TraceableApiError> \n\nexport default function getRequestWrapper<\n    ResultingApiError = ITraceableApiErrorBase<{}>,\n    TraceableApiError = ITraceableApiErrorBase<{}>\n>({\n    apiLogger,\n    defaultBaseUrl = '',\n    defaultTimeoutInMillis,\n    mapError,\n    onError,\n}: IRequestWrapperConfig<ResultingApiError, TraceableApiError>): IRequestWrapper",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-axios/src/request/types.ts",
                    "slug": "/snipsonian-axios/1.9.1/request/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IBaseRequestConfig<Result, ResponseData> \n\nexport interface IBodyRequestConfig<Result, ResponseData> extends IBaseRequestConfig<Result, ResponseData>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "test",
            "path": "packages/snipsonian-axios/src/test",
            "slug": "/snipsonian-axios/1.9.1/test",
            "type": "folder",
            "children": [
                {
                    "name": "requestMocker.ts",
                    "path": "packages/snipsonian-axios/src/test/requestMocker.ts",
                    "slug": "/snipsonian-axios/1.9.1/test/requestMocker.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function resetMockHandlers(): void \n\nexport function mockGetSuccess({\n    url,\n    baseUrl = '',\n    pathParams = {},\n    queryParams = {},\n    responseStatus = HTTP_STATUS.OK,\n    responseData,\n    responseHeaders,\n    onlyMatchUrlStart = false,\n}: IMockConfig): jest.Mock<{}> \n\nexport function mockPutSuccess({\n    url,\n    baseUrl = '',\n    pathParams = {},\n    queryParams = {},\n    responseStatus = HTTP_STATUS.OK,\n    responseData,\n    responseHeaders,\n    onlyMatchUrlStart = false,\n}: IMockConfig): jest.Mock<{}> \n\nexport function mockPostSuccess({\n    url,\n    baseUrl = '',\n    pathParams = {},\n    queryParams = {},\n    responseStatus = HTTP_STATUS.OK,\n    responseData,\n    responseHeaders,\n    onlyMatchUrlStart = false,\n}: IMockConfig): jest.Mock<{}> \n\nexport function mockPatchSuccess({\n    url,\n    baseUrl = '',\n    pathParams = {},\n    queryParams = {},\n    responseStatus = HTTP_STATUS.OK,\n    responseData,\n    responseHeaders,\n    onlyMatchUrlStart = false,\n}: IMockConfig): jest.Mock<{}>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        }
    ]
}