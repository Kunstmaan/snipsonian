{
    "title": "snipsonian-redux-first-router",
    "version": "1.9.1",
    "slug": "/snipsonian-redux-first-router/1.9.1",
    "description": "Router configuration with redux",
    "documentation": [
        {
            "name": "action",
            "path": "packages/snipsonian-redux-first-router/src/action",
            "slug": "/snipsonian-redux-first-router/1.9.1/action",
            "type": "folder",
            "children": [
                {
                    "name": "actions.ts",
                    "path": "packages/snipsonian-redux-first-router/src/action/actions.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/action/actions.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function createLocationAction<Payload extends object, Query extends RfrQuery = {}, ActionType = string>({\n    type,\n    payload = ({} as Payload), // eslint-disable-line @typescript-eslint/no-object-literal-type-assertion\n    query = ({} as Query), // eslint-disable-line @typescript-eslint/no-object-literal-type-assertion\n}: {\n    type: ActionType;\n    payload?: Payload;\n    query?: Query;\n}): ILocationAction<Payload, Query, ActionType>",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-redux-first-router/src/action/types.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/action/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface ILocationAction<\n    Payload extends object,\n    Query extends RfrQuery = {},\n    ActionType = string\n> extends IAction<Payload, ActionType>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "configureRouter",
            "path": "packages/snipsonian-redux-first-router/src/configureRouter",
            "slug": "/snipsonian-redux-first-router/1.9.1/configureRouter",
            "type": "folder",
            "children": [
                {
                    "name": "index.ts",
                    "path": "packages/snipsonian-redux-first-router/src/configureRouter/index.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/configureRouter/index.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IConfigureOptions<ReducerState> \n\nexport default function configureRouter<ReducerState>({\n    reducerKey = DEFAULT_REDUCER_KEY,\n    routes = getRegisteredRoutes(),\n    initialDispatch,\n    reducerStorageType = REDUCER_STORAGE_TYPE.NO_STORAGE,\n    transformReducerStateForStorage,\n    otherRouterOptions = {},\n}: IConfigureOptions<ReducerState>): IConfiguredRouter",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "toRoutesMap.ts",
                    "path": "packages/snipsonian-redux-first-router/src/configureRouter/toRoutesMap.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/configureRouter/toRoutesMap.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function toRoutesMap(routes: IBaseRoutes): RoutesMap",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "index.ts",
            "path": "packages/snipsonian-redux-first-router/src/index.ts",
            "slug": "/snipsonian-redux-first-router/1.9.1/index.ts",
            "type": "file",
            "fileInfo": {
                "exports": null,
                "description": "Router configuration with redux",
                "example": null
            }
        },
        {
            "name": "reducer",
            "path": "packages/snipsonian-redux-first-router/src/reducer",
            "slug": "/snipsonian-redux-first-router/1.9.1/reducer",
            "type": "folder",
            "children": [
                {
                    "name": "index.ts",
                    "path": "packages/snipsonian-redux-first-router/src/reducer/index.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/reducer/index.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IReducerState<RouteKey extends string> extends LocationState \n\nexport interface IPrevLocation<RouteKey extends string> extends Location",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "route",
            "path": "packages/snipsonian-redux-first-router/src/route",
            "slug": "/snipsonian-redux-first-router/1.9.1/route",
            "type": "folder",
            "children": [
                {
                    "name": "routeManager.ts",
                    "path": "packages/snipsonian-redux-first-router/src/route/routeManager.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/route/routeManager.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export function registerRoutes(routes: IBaseRoutes): void \n\nexport function getRegisteredRoutes<Route extends IBaseRoute = IBaseRoute>(): IBaseRoutes<Route> \n\nexport function getRoute<Route extends IBaseRoute = IBaseRoute>({ routeKey }: { routeKey: string }): Route \n\nexport function getRoutePath({ routeKey }: { routeKey: string }): string \n\nexport function getRouteKeyByPath({ path }: { path: string }): string \n\nexport function doesRouteBelongToGroup({ routeKey, group }: { routeKey: string; group: string }): boolean \n\nexport function getRouteKeysThatBelongToGroup({ group }: { group: string }): string[]",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "types.ts",
                    "path": "packages/snipsonian-redux-first-router/src/route/types.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/route/types.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IBaseRoute<Page = any, Template = any, AppState = any> extends RouteObject \n\nexport interface IBaseRoutes<Route extends IBaseRoute = IBaseRoute>",
                        "description": null,
                        "example": null
                    }
                }
            ]
        },
        {
            "name": "selectors",
            "path": "packages/snipsonian-redux-first-router/src/selectors",
            "slug": "/snipsonian-redux-first-router/1.9.1/selectors",
            "type": "folder",
            "children": [
                {
                    "name": "index.ts",
                    "path": "packages/snipsonian-redux-first-router/src/selectors/index.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/selectors/index.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export interface IPayload \n\nexport function setReducerKey(newReducerKey: string): void \n\nexport function getReducerState<RouteKey extends string>(state: any): IReducerState<RouteKey> \n\nexport function getCurrentRouteKey<RouteKey extends string>(state: any): RouteKey \n\nexport function getCurrentRouteInfo<Route extends IBaseRoute = IBaseRoute>(state: any): Route \n\nexport function getCurrentRoutePayload<Payload extends IPayload>(state: any): Payload \n\nexport function getPropertyFromCurrentRoutePayload<Payload extends IPayload>(state: any, property: string): any \n\nexport function getCurrentRouteQueryParams<Query extends object>(state: any): Query \n\nexport function getTopParentRouteKey(state: any): string \n\nexport function isChildRouteOf<RouteKey extends string>(routeKey: RouteKey, possibleParentRouteKey: string): boolean \n\nexport function getVirtualPageForRoute(state: any, route: IBaseRoute): string",
                        "description": null,
                        "example": null
                    }
                },
                {
                    "name": "parseVirtualPage.ts",
                    "path": "packages/snipsonian-redux-first-router/src/selectors/parseVirtualPage.ts",
                    "slug": "/snipsonian-redux-first-router/1.9.1/selectors/parseVirtualPage.ts",
                    "type": "file",
                    "fileInfo": {
                        "exports": "export default function parseVirtualPage(state: any, virtualPageConfig: TVirtualPageConfig): string",
                        "description": null,
                        "example": null
                    }
                }
            ]
        }
    ]
}